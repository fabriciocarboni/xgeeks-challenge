name: Build & Deploy images to ECR

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  build:

    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: CALCULATOR - Build, tag, and push image to Amazon ECR
      id: build-image-calculator
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: calculator
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: ADDITION - Build, tag, and push image to Amazon ECR
      id: build-image-addition
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: addition
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: SUBTRACTION - Build, tag, and push image to Amazon ECR
      id: build-image-subtraction
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: subtraction
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: MULTIPLICATION - Build, tag, and push image to Amazon ECR
      id: build-image-multiplication
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: multiplication
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: DIVISION - Build, tag, and push image to Amazon ECR
      id: build-image-division
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: division
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: REMAINDER - Build, tag, and push image to Amazon ECR
      id: build-image-remainder
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: remainder
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"        

    - name: BASE - Build, tag, and push image to Amazon ECR
      id: build-image-base
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: base
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: CLIENT - Build, tag, and push image to Amazon ECR
      id: build-image-client
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: client
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG services/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Install and configure kubectl
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBECONFIG }}
    
    # - name: Install and configure kubectl
    #   run: |
    #     VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt) \
    #     curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
    #       --progress-bar \
    #       --location \
    #       --remote-name \
    #     chmod +x kubectl \
    #     sudo mv kubectl /usr/local/bin/ \
    #     echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
    
# - name: Deploy
#     env:
#     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#     run: |
#     export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
#     export IMAGE_TAG=${{ env.SHORT_SHA }}
#     export KUBECONFIG=kubeconfig.yaml
#     envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
#     kubectl kustomize k8s | kubectl apply -f -

# - configurar service account com permissao de deploy
# - encodar ~/.kube/config pra base64
# - jogar como secret no github
# - desencodar em tempo de execucao (decode e jogar pra arquivo)
# - export KUBECONFIG no arquivo criado